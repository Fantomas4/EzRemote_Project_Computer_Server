A Request JSON messsage has the following form: { request : // (type of request is stated here, for example "INITIALIZE_NEW_CONNECTION") data : { // A JSON structure inside the request JSON message containing any necessary data for the request. // In the example of INITIALIZE_NEW_CONNECTION, such data, for example, would be the unique user identifier (USER_ID) } }

A Response JSON message has the following form (taken from JSend protocol: https://github.com/omniti-labs/jsend): { status : // can be "SUCCESS", "FAIL" or "ERROR" data : { // A JSON structure inside the response JSON message containing any necessary data for the response. } }
(based on https://github.com/omniti-labs/jsend)



Protocol for initializing a new connection from a Client to the Main Server:

Client sends a JSON request:

request: INITIALIZE_NEW_CONNECTION
data: client_ip

Server sends a JSON response:
status is either "SUCCESS" if the new connection was accepted and established successfully, "FAIL" if there was a problem satisfying the request or "ERROR" if an error occured 
in processing the request i.e an exception was thrown.
data: <NONE> or a fail message string store in fail_message or an error message string stored in error_message 




Protocol for terminating the connection between the client and the server:

Client sends a JSON request:

request: TERMINATE_CONNECTION
data: <NONE>

Server sends a JSON response:
status is either "SUCCESS" if the new connection was accepted and established successfully, "FAIL" if there was a problem satisfying the request or "ERROR" if an error occured
in processing the request i.e an exception was thrown.
data: <NONE> or a fail message string store in fail_message or an error message string stored in error_message





Protocol for requesting the execution of the "Shutdown" command:

Client sends a JSON request:

request: EXECUTE_SHUTDOWN_COMMAND
data: hours, mins, secs, msecs

Server sends a JSON response:
status:  "SUCCESS" if the "Shutdown" request has been serviced successfully, "FAIL" if there was a problem satisfying the request or "ERROR" if an error occured
in processing the request i.e an exception was thrown.
data: <NONE> or a fail message string store in fail_message or an error message string stored in error_message 




Protocol for requesting the cancellation of the "Shutdown" command currently in progress:

Client sends a JSON request:

request: CANCEL_SHUTDOWN_COMMAND
data: <NONE>

Server sends a JSON response:
status:  "SUCCESS" if the "Shutdown" command currently in progress has been cancelled successfully, "FAIL" if there was a problem satisfying the request or "ERROR" if an error occured 
in processing the request i.e an exception was thrown.
data: <NONE> or a fail message string store in fail_message or an error message string stored in error_message 




Heartbeat protocol (A protocol used to check if a client is still alive, while at the same time keeping the socket open):

Client sends a heartbeat request every X seconds to every client that has connected to it. X is a time interval set in the application's settings. The type of request that is used for this is "HEARTBEAT_CHECK". No data is required inside the message of a heartbeat request.
If the Server is still active and working normally, it will respond to the client's heartbeat request with a response. The response has a "SUCCESS" status. No data is required inside the heartbeat check response.
A timeout is set for the server. If the timeout expires and the client has not received a heartbeat response from a client, the server is considered unavailable/unreachable and the client immediately disconnected from the server. Otherwise, if a proper heartbeat response is received, the server is considered active and fully functional, thus no further action is taken.

Client sends a JSON request:

request: HEARTBEAT_CHECK
data: <NONE>

Server sends a JSON response (to verify he is still online):
status: "SUCCESS"
data: <NONE>


